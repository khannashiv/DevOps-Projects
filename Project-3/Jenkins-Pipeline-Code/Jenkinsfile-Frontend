pipeline {
    agent any 
    tools {
        nodejs 'NodeJS'
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('AWS_Account_ID_for_ECR')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO_FE')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git credentialsId: 'Github_PAT', url: 'https://github.com/khannashiv/DevOps-Projects.git', branch: 'main'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('Application-Code/frontend') {
                    withSonarQubeEnv('Sonar-Server') {
                        script{
                            echo "Running SonarQube Scanner..."
                            sh ''' 
                            echo "Scanner Home: $SCANNER_HOME"
                            $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectName=Three-tier-Frontend \
                            -Dsonar.projectKey=Three-tier-Frontend '''
                        }
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar_Token' 
                }
            }
        }
        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Application-Code/frontend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/frontend') {
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'pwd'
                            sh 'ls -al'
                            sh 'ls -al Dockerfile'
                            sh 'echo ${WORKSPACE}'
                            sh 'docker build -t ${AWS_ECR_REPO_NAME} -f Dockerfile .'
                            // sh 'ls -al ${WORKSPACE}/Application-Code/frontend/Dockerfile'
                            // sh 'docker build -t ${AWS_ECR_REPO_NAME} -f "${WORKSPACE}/Application-Code/frontend/Dockerfile" "${WORKSPACE}/Application-Code/frontend"'
                            // sh 'docker build -t ${AWS_ECR_REPO_NAME} -f ${WORKSPACE}/Application-Code/frontend/Dockerfile ${WORKSPACE}/Application-Code/frontend'
                            // sh 'docker build -t ${AWS_ECR_REPO_NAME} -f Dockerfile .'
                    }
                }
            }
        }
        stage("ECR Image Pushing") {
            steps {
                script {
                        sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
                        sh 'docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                        sh 'docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                }
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt' 
            }
        }
        stage('Checkout Code') {
            steps {
                git credentialsId: 'Github_PAT', url: 'https://github.com/khannashiv/DevOps-Projects.git', branch: 'main'
            }
        }
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "DevOps-Projects"
                GIT_USER_NAME = "khannashiv"
            }
            steps {
                dir('Kubernetes-Manifests-file/Frontend') {
                    withCredentials([string(credentialsId: 'Github_PAT', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "khannashiv94@gmail.com"
                            git config user.name "khannashiv"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            imageTag=$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml)
                            echo $imageTag
                            sed -i "s/${AWS_ECR_REPO_NAME}:${imageTag}/${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}/" deployment.yaml
                            git add deployment.yaml
                            git commit -m "Update deployment Image to version \${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
}
